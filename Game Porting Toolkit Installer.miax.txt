Comment: Game Porting Toolkit Installation Example
Comment: =========================================
Comment: This project shows how to handle dialog events and build a highly custom script that doesn't directly install anything
 
Comment: Please visit https://www.installaware.com/gnu.asp for the latest version of this project online
 
Comment: This project uses:
Comment: ------------------
Comment: 1. The Browse for File command to select files of particular types
Comment: 2. The Prompt for Text command to capture custom string input
Comment: 3. The Convert Path command to obtain fully qualified file paths from relatives
Comment: 4. The Set Access Control command to set executable permissions on emitted scripts
Comment: 5. The Find All Files command to locate folders of unknown names on a given path
Comment: 6. The Label command to define custom execution points
Comment: 7. The GoTo command to direct program flow to a label
Comment: 8. The Download File command to obtain files from the Internet at runtime
Comment: 9. The (Return from) Include Script commands to automate the task of running jobs with sudo, logging, and environment variables
Comment: 10. The Write to Text File command paired with the Run Program command to create shell scripts with piped input
Comment: 11. The Run Program As command to run console applications while capturing, displaying, and logging their live output
Comment: 12. The pre-defined $PLATFORMFULL$ variable to query platform attributes
 
Comment: Additional general scripting commands are used to run programs, disable dialog controls
 
Comment: See in-code comments for more information.
 
[DEFINE REGION: Query system state and choose installation defaults]
Comment: Since this setup shall be compiled by IAMP for Intel, Rosetta would never need explicit installation
if Variable PLATFORMFULL Contains (Ignore Case) arm
  MessageBox: $TITLE$, Please compile $TITLE$ using the Intel version of InstallAware Multi Platform.$NEWLINE$$NEWLINE$$TITLE$ shall now quit.
  Terminate Installation
end
Set Variable DMGPATH to 
Set Variable DMGPATHEX to 
Set Variable EXEPATH to 
Set Variable HUD to FALSE
Set Variable ESYNC to TRUE
label: Top
Comment: (Re)Initialize checkbox and path variables
Set Variable SUDO to 
Set Variable ROSETTA to FALSE
Set Variable HOMEBREW to TRUE
Set Variable WINE to TRUE
Set Variable CONFIGURE to TRUE
Set Variable WINEPATH to ~/.wine
Convert to Long Path: WINEPATH 
Comment: Check for Homebrew
Does File Exist /usr/local/bin/brew (get result into variable BREW)
if Variable BREW Equals TRUE
  Set Variable HOMEBREW to FALSE
end
Comment: Check for existing ~/.wine instance
Does Folder Exist $WINEPATH$ (get result into variable HOMEWINE)
if Variable HOMEWINE Equals TRUE
  Set Variable WINE to FALSE
  Set Variable CONFIGURE to FALSE
end
[END REGION]
 
[DEFINE REGION: Display menu and handle events]
label: Menu
Comment: Shortcut to handle two different kinds of Browse buttons for easy Windows app locators
Set Variable DOWNLOADPATH to ~/Downloads
Convert to Long Path: DOWNLOADPATH 
Set Variable PROGRAMSMASK to PC Programs (*.exe)|*.exe|All Files (*)|*
Comment: Display menu
Display Dialog: wizard, wait for dialog to return (modal)
if Variable WIZARD Equals CANCEL
  Terminate Installation
end
if Variable WIZARD Equals URL
  Run Program https://developer.apple.com/download/all/?q=game%20porting%20toolkit 
end
if Variable WIZARD Equals URLEX
  Run Program https://developer.apple.com/download/all/?q=command line tools 
end
if Variable WIZARD Equals DMGPATH
  Browse for a(n) open file path into variable AGPT, with caption Please select the Apple Game Porting Toolkit download:, start at default directory $DOWNLOADPATH$
  Does File Exist $AGPT$ (get result into variable AGPT_EXISTS)
  if Variable AGPT_EXISTS Equals FALSE
    if Variable AGPT not Equals 
      MessageBox: Selected DMG Not Readable, $AGPT$ cannot be read!$NEWLINE$$NEWLINE$Please try again.
    end
  else
    Set Variable DMGPATH to $AGPT$
  end
end
if Variable WIZARD Equals DMGPATHEX
  Browse for a(n) open file path into variable XCODE, with caption Please select the Xcode Command Line Tools download:, start at default directory $DOWNLOADPATH$
  Does File Exist $XCODE$ (get result into variable XCODE_EXISTS)
  if Variable XCODE_EXISTS Equals FALSE
    if Variable XCODE not Equals 
      MessageBox: Selected DMG Not Readable, $XCODE$ cannot be read!$NEWLINE$$NEWLINE$Please try again.
    end
  else
    Set Variable DMGPATHEX to $XCODE$
  end
end
if Variable WIZARD Equals EXEPATHEX
  Set Variable DOWNLOADPATH to $WINEPATH$/drive_c/ProgramData/Microsoft/Windows/Start Menu/Programs
  Set Variable PROGRAMSMASK to PC Programs and Shortcuts (*.exe;*.lnk)|*.exe;*.lnk|All Files (*)|*
  Set Variable WIZARD to EXEPATH
end
if Variable WIZARD Equals EXEPATH
  Browse for a(n) open file path into variable EXE, with caption Please select the PC game (installer) to run:, start at default directory $DOWNLOADPATH$
  Does File Exist $EXE$ (get result into variable EXE_EXISTS)
  if Variable EXE_EXISTS Equals FALSE
    if Variable EXE not Equals 
      MessageBox: Selected EXE Not Readable, $EXE$ cannot be read!$NEWLINE$$NEWLINE$Please try again.
    end
  else
    Set Variable EXEPATH to $EXE$
    Comment: Allow manually adding launch parameters (for Wine workarounds, etc.) by double quoting path explicitly where necessary
    if Variable EXEPATH Contains  
      Set Variable EXEPATH to "$EXEPATH$"
    end
  end
end
Comment: Proceed to main phase!
if Variable WIZARD not Equals NEXT
  GoTo Label: Menu
end
[END REGION]
 
[DEFINE REGION: Process selected tasks]
Display Dialog: progress, use as progress dialog (non-modal)
if Variable DMGPATHEX not Equals 
  Set Variable PROGRESSTEXT to Mounting Xcode Command Line Tools DMG$NEWLINE$$DMGPATHEX$
  Set Variable PROGRESS to 33
  Run Program /usr/bin/hdiutil attach "$DMGPATHEX$" -mountroot "$SUPPORTDIR$/xcode" (WAIT, get result into variable ATTACH)
  if Variable ABORT Equals TRUE
    Terminate Installation
  end
  if Variable ATTACH not Equals 0
    MessageBox: $TITLE$, Mounting Disk Image Failed!$NEWLINE$$NEWLINE$Please ensure $DMGPATHEX$ exists, is not already mounted, and try again.$NEWLINE$$NEWLINE$If it is already mounted, please unmount (eject) it first!$NEWLINE$$NEWLINE$Error code: $ATTACH$
    GoTo Label: Top
  end
  Find All Files in path $SUPPORTDIR$/xcode/*, write result into variable MOUNTPATH
  Replace " with  in variable MOUNTPATH
  Set Variable RUNAS_ARM64 to FALSE
  Set Variable SUDO_COMMAND to /usr/bin/sudo -A /usr/sbin/installer -pkg "$MOUNTPATH$/Command Line Tools.pkg" -target /
  Set Variable PROGRESSTEXT to Installing Xcode Command Line Tools
  Set Variable PROGRESS to 67
  Include Script: sudo (get result into variable XCODE_RESULT)
  if Variable ABORT Equals TRUE
    Terminate Installation
  end
  if Variable XCODE_RESULT not Equals 0
    MessageBox: $TITLE$, Installing Xcode Command Line Tools Failed!$NEWLINE$$NEWLINE$Please check your free disk space, and try again.$NEWLINE$$NEWLINE$Error code: $XCODE_RESULT$
  else
    Comment: Don't ask for this again
    Set Variable DMGPATHEX to 
  end
  Set Variable PROGRESSTEXT to Unmounting Xcode Command Line Tools DMG$NEWLINE$$MOUNTPATH$
  Set Variable PROGRESS to 100
  Run Program /usr/bin/hdiutil detach "$MOUNTPATH$" (WAIT, get result into variable DETACH)
  if Variable ABORT Equals TRUE
    Terminate Installation
  end
  if Variable DETACH not Equals 0
    MessageBox: $TITLE$, Unmounting Disk Image Failed!$NEWLINE$$NEWLINE$Please unmount "$MOUNTPATH$" manually.$NEWLINE$$NEWLINE$Error code: $DETACH$
  end
end
if Variable HOMEBREW Equals TRUE
  Set Variable PROGRESS to 0
  Does File Exist /opt/homebrew/bin/brew (get result into variable ARMBREW)
  if Variable ARMBREW Equals TRUE
    MessageBox: $TITLE$, Homebrew for Apple Silicon is already installed and must be removed first.$NEWLINE$$NEWLINE$WARNING! This WILL remove all existing Homebrew packages.$NEWLINE$$NEWLINE$Would you like to remove your existing Homebrew for Apple Silicon, together with all of its packages?
    if Variable REMOVE_ARMBREW Equals YES
      Set Variable PROGRESS to 17
      Set Variable PROGRESSTEXT to Downloading Homebrew Apple Silicon Uninstallation Script$NEWLINE$https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh
      Download File https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh to $SUPPORTDIR$uninstall.sh, get result into variable UNSH
      if Variable ABORT Equals TRUE
        Terminate Installation
      end
      if Variable UNSH not Equals SUCCESS
        MessageBox: $TITLE$, Homebrew Apple Silicon Download Failed!$NEWLINE$$NEWLINE$Please check you are connected to the Internet and try again.
        GoTo Label: Top
      end
      Comment: Approve package deletion
      Write into Text File $SUPPORTDIR$y.txt from Value y (at end of file)
      Add Read Write Execute Permissions to File System Object "$SUPPORTDIR$y.txt" for Other Owner Group 
      Set Variable PROGRESSTEXT to Uninstalling Homebrew Apple Silicon
      Set Variable PROGRESS to 34
      Comment: Need to manually switch back to Apple Silicon architecture now
      Set Variable RUNAS_ARM64 to TRUE
      Set Variable SUDO_COMMAND to /bin/bash '$SUPPORTDIR$uninstall.sh' < '$SUPPORTDIR$y.txt'
      Include Script: sudo (get result into variable HOMEBREWUN)
      Delete Files $SUPPORTDIR$/y.txt (when installing)
      Delete Files $SUPPORTDIR$/uninstall.sh (when installing)
      if Variable ABORT Equals TRUE
        Terminate Installation
      end
      if Variable HOMEBREWUN not Equals 0
        Does File Exist /opt/homebrew/bin/brew (get result into variable BREWUN)
        Comment: Sometimes Homebrew uninstallation returns 1, although it succeeds
        if Variable BREWUN Equals TRUE
          MessageBox: $TITLE$, Homebrew Apple Silicon Uninstallation Failed!$NEWLINE$$NEWLINE$Please check your password, and try again.$NEWLINE$$NEWLINE$Error code: $HOMEBREWUN$
          GoTo Label: Top
        end
      end
    else
      GoTo Label: Top
    end
  end
  Set Variable PROGRESS to 50
  Set Variable PROGRESSTEXT to Downloading Homebrew x86_64 Installation Script$NEWLINE$https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
  Download File https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh to $SUPPORTDIR$install.sh, get result into variable SH
  if Variable ABORT Equals TRUE
    Terminate Installation
  end
  if Variable SH not Equals SUCCESS
    MessageBox: $TITLE$, Homebrew x86_64 Download Failed!$NEWLINE$$NEWLINE$Please check you are connected to the Internet and try again.
    GoTo Label: Top
  end
  Set Variable PROGRESSTEXT to Installing Homebrew x86_64
  Set Variable PROGRESS to 50
  Set Variable RUNAS_ARM64 to FALSE
  Set Variable SUDO_COMMAND to /bin/bash '$SUPPORTDIR$install.sh'
  Include Script: sudo (get result into variable HOMEBREW)
  Delete Files $SUPPORTDIR$/install.sh (when installing)
  if Variable ABORT Equals TRUE
    Terminate Installation
  end
  if Variable HOMEBREW not Equals 0
    Does File Exist /usr/local/bin/brew (get result into variable BREW)
    Comment: Sometimes Homebrew installation returns 1, although it succeeds
    if Variable BREW Equals FALSE
      MessageBox: $TITLE$, Homebrew x86_64 Installation Failed!$NEWLINE$$NEWLINE$Please check your Internet connection, free disk space, and try again.$NEWLINE$$NEWLINE$Error code: $HOMEBREW$
      GoTo Label: Top
    end
  end
end
if Variable WINE Equals TRUE
  Set Variable PROGRESS to 50
  Set Variable COMMAND_DESCRIPTION to Tapping Apple Homebrew$NEWLINE$apple/apple http://github.com/apple/homebrew-apple --custom-remote
  Set Variable LOGGED_COMMAND to /usr/local/bin/brew
  Comment: /// is the escape sequence for //
  Set Variable LOGGED_PARAMS to tap apple/apple http:///github.com/apple/homebrew-apple --custom-remote
  Include Script: logging (get result into variable TAP)
  if Variable TAP not Equals 0
    GoTo Label: Top
  end
  Set Variable PROGRESS to 100
  Set Variable COMMAND_DESCRIPTION to Downloading and Installing Wine$NEWLINE$(this will take an extended amount of time)
  Set Variable LOGGED_COMMAND to /usr/local/bin/brew
  Set Variable LOGGED_PARAMS to -v install apple/apple/game-porting-toolkit
  Include Script: logging (get result into variable GPT)
  if Variable GPT not Equals 0
    GoTo Label: Top
  end
end
if Variable CONFIGURE Equals TRUE
  Set Variable PROGRESSTEXT to Configuring Windows Settings$NEWLINE$/usr/local/opt/game-porting-toolkit/bin/wine64
  Set Variable PROGRESS to 100
  Run Program /usr/local/opt/game-porting-toolkit/bin/wine64 winecfg (WAIT, get result into variable WINECFG)
  if Variable ABORT Equals TRUE
    Terminate Installation
  end
  if Variable WINECFG not Equals 0
    MessageBox: $TITLE$, Windows Configuration Failed!$NEWLINE$$NEWLINE$Please configure Wine manually, or try again.$NEWLINE$$NEWLINE$Error code: $WINECFG$
    GoTo Label: Top
  end
end
if Variable DMGPATH not Equals 
  Set Variable PROGRESSTEXT to Mounting Apple Game Porting Toolkit DMG$NEWLINE$$DMGPATH$
  Set Variable PROGRESS to 33
  Run Program /usr/bin/hdiutil attach "$DMGPATH$" -mountroot "$SUPPORTDIR$/agpt" (WAIT, get result into variable ATTACH)
  if Variable ABORT Equals TRUE
    Terminate Installation
  end
  if Variable ATTACH not Equals 0
    MessageBox: $TITLE$, Mounting Disk Image Failed!$NEWLINE$$NEWLINE$Please ensure $DMGPATH$ exists, is not already mounted, and try again.$NEWLINE$$NEWLINE$If it is already mounted, please unmount (eject) it first!$NEWLINE$$NEWLINE$Error code: $ATTACH$
    GoTo Label: Top
  end
  Find All Files in path $SUPPORTDIR$/agpt/*, write result into variable MOUNTPATH
  Replace " with  in variable MOUNTPATH
  Does Folder Exist $MOUNTPATH$/redist (get result into variable AGPT_BETA4)
  Set Variable PROGRESSTEXT to Copying Apple Game Porting Toolkit Files
  Set Variable PROGRESS to 67
  if Variable AGPT_BETA4 Equals TRUE
    Comment: Beta 4 of Apple Game Porting Toolkit changes the DMG layout
    Run Program /usr/bin/ditto "$MOUNTPATH$/redist/lib" /usr/local/opt/game-porting-toolkit/lib (WAIT, get result into variable DITTO)
  else
    Run Program /usr/bin/ditto "$MOUNTPATH$/lib" /usr/local/opt/game-porting-toolkit/lib (WAIT, get result into variable DITTO)
  end
  if Variable ABORT Equals TRUE
    Terminate Installation
  end
  if Variable DITTO not Equals 0
    MessageBox: $TITLE$, Apple Game Porting Toolkit Copy Failed!$NEWLINE$$NEWLINE$DirectX 12 games may not be accelerated.$NEWLINE$$NEWLINE$You may try again later.$NEWLINE$$NEWLINE$Error code: $DITTO$
  else
    Comment: Don't prompt for this again
    Set Variable DMGPATH to 
  end
  Set Variable PROGRESSTEXT to Unmounting Apple Game Porting Toolkit DMG$NEWLINE$$MOUNTPATH$
  Set Variable PROGRESS to 100
  Run Program /usr/bin/hdiutil detach "$MOUNTPATH$" (WAIT, get result into variable DETACH)
  if Variable ABORT Equals TRUE
    Terminate Installation
  end
  if Variable DETACH not Equals 0
    MessageBox: $TITLE$, Unmounting Disk Image Failed!$NEWLINE$$NEWLINE$Please unmount "$MOUNTPATH$" manually.$NEWLINE$$NEWLINE$Error code: $DETACH$
  end
end
if Variable EXEPATH not Equals 
  Set Variable PROGRESS to 100
  Set Variable COMMAND_DESCRIPTION to Launching PC program$NEWLINE$$EXEPATH$
  Set Variable ENVIRONMENT to WINEPREFIX=$WINEPATH$
  Comment: Launches your game with the extended Metal Performance HUD visible
  if Variable HUD Equals TRUE
    Set Variable ENVIRONMENT to $ENVIRONMENT$ MTL_HUD_ENABLED=1
  end
  Comment: Launches your game with Wine's ESYNC option, a common compatibility flag
  if Variable ESYNC Equals TRUE
    Set Variable ENVIRONMENT to $ENVIRONMENT$ WINEESYNC=1
  end
  Set Variable ENV_COMMAND to /usr/local/opt/game-porting-toolkit/bin/wine64
  Set Variable ENV_PARAMS to $EXEPATH$
  Comment: Fix for this potential error: "Server is running with WINEESYNC but this process is not, please enable WINEESYNC or restart wineserver."
  Run Program /usr/bin/killall wineserver (WAIT)
  Include Script: env (get result into variable RUN)
  if Variable ABORT Equals TRUE
    Terminate Installation
  end
  if Variable RUN not Equals 0
    GoTo Label: Top
  end
end
[END REGION]
 
